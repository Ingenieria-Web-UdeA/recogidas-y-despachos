import Layout from '@layouts/Layout';
import Head from 'next/head';
// import { data } from 'utils/data';
import _ from 'lodash';
import { DateFilters } from '@components/DateFilters';
import ActionButtons from '@components/ActionButtons';
import { RecogidasContextProvider } from '@context/recogidasContext';
import { ModalRecogidas } from '@components/modals/ModalRecogidas';
import { ModalDespachos } from '@components/modals/ModalDespachos';
import { NextPage } from 'next';
import { CardLote } from '@components/CardLote';
import PrivateRoute from '@components/PrivateRoute';
import { useQuery } from '@apollo/client';
import { GET_FILTERED_COLLECTIONS } from 'graphql/client/collections';
import { ExtendedCollection } from 'types';
import { TypeColumn } from '@inovua/reactdatagrid-community/types/TypeColumn';
import ReactDataGrid from '@inovua/reactdatagrid-community';
import { Lot } from '@prisma/client';
import { GET_LOTS } from 'graphql/client/lots';
import { useDateFiltersContext } from '@context/DateFiltersContext';
import '@inovua/reactdatagrid-community/index.css';

const Home: NextPage = () => (
  <PrivateRoute>
    <Head>
      <title>Create Next App</title>
      <meta name='description' content='Generated by create next app' />
      <meta name='viewport' content='width=device-width, initial-scale=1' />
      <link rel='icon' href='/favicon.ico' />
    </Head>
    <Layout>
      <RecogidasContextProvider>
        <RecogidasDespachos />
      </RecogidasContextProvider>
    </Layout>
  </PrivateRoute>
);

const RecogidasDespachos = () => (
  <div className='flex h-full w-full flex-col gap-2 p-4'>
    <div className='flex justify-center'>
      <h1>Recogidas y despachos</h1>
    </div>
    <div className='flex flex-col items-center justify-center gap-2 md:flex-row md:justify-between'>
      <ActionButtons />
    </div>
    <DateFilters />
    <DesktopTable />
    <MobileCards />

    <div>Footer</div>

    <ModalRecogidas />
    <ModalDespachos />
  </div>
);

const DesktopTable = () => {
  const { dateFilters } = useDateFiltersContext();
  const { data, loading } = useQuery<{
    filterCollections: ExtendedCollection[];
  }>(GET_FILTERED_COLLECTIONS, {
    variables: {
      dateFilters,
    },
    fetchPolicy: 'cache-first',
  });

  const { data: lotData, loading: loadingLots } = useQuery<{ lots: Lot[] }>(
    GET_LOTS,
    {
      fetchPolicy: 'cache-first',
    }
  );

  const datos = _.groupBy(data?.filterCollections, 'collectionDate');

  if (loading || loadingLots) return <div>Loading...</div>;

  const lotColumns =
    lotData?.lots?.map((lot) => ({
      name: lot.name,
      header: lot.name,
      defaultFlex: 1,
      headerProps: {
        style: {
          backgroundColor: '#3730A3',
          color: 'white',
        },
      },
    })) ?? [];

  const filterValues =
    lotData?.lots?.map((lot) => ({
      name: lot.name,
      operator: 'gte',
      type: 'number',
      value: '0',
    })) ?? [];

  const columns: TypeColumn[] = [
    {
      name: 'collectionDate',
      header: 'Fecha de recogida',
      defaultFlex: 1,
      headerProps: {
        style: {
          backgroundColor: '#3730A3',
          color: 'white',
        },
      },
    },
    ...lotColumns,
  ];

  const transformedData = Object.keys(datos).map((fecha) => {
    const lotData: { [key: string]: string | number } = {
      collectionDate: fecha,
    };

    datos[fecha].forEach((el) => {
      lotData[el.lot.name] = el.bunches;
    });

    return lotData;
  });

  return (
    <div className='hidden h-full flex-col md:flex'>
      <ReactDataGrid
        columns={columns}
        dataSource={transformedData}
        defaultFilterValue={filterValues}
        pagination
        pageSizes={[10, 15, 20, 31]}
      />
    </div>
  );
};

const MobileCards = () => (
  <div className='grid h-full grid-cols-2 items-center justify-items-center gap-2 sm:grid-cols-4 md:hidden'>
    {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((lote) => (
      <CardLote key={`lote_${lote}`} loteNumero={lote} />
    ))}
  </div>
);

export default Home;
